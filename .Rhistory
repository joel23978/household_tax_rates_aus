filter(year == yr
, residency == resident_status)
income_tax_payable <<- 0
for (i in 1:nrow(tmp)){
if (income.gross > tmp$threshold[i]) {
income_tax_payable <<- income_tax_payable +
min(income.gross-tmp$threshold[i], replace_na(tmp$threshold[i+1]-tmp$threshold[i], Inf))*(tmp$rate[i]+tmp$levy[i]+tmp$repair_levy[i])
}
}
print(income_tax_payable)
}
income_tax(112000, tax_threshold_data)
income_tax <- function(income.gross
, tax_threshold_data
, yr = year(Sys.Date()) # optional
, resident_status = "resident" # optional
) {
tmp <- tax_threshold_data %>%
filter(year == yr
, residency == resident_status)
income_tax_payable <<- 0
for (i in 1:nrow(tmp)){
if (income.gross > tmp$threshold[i]) {
income_tax_payable <<- income_tax_payable +
min(income.gross-tmp$threshold[i], replace_na(tmp$threshold[i+1]-tmp$threshold[i], Inf))*(tmp$rate[i]+tmp$levy[i]+tmp$repair_levy[i])
}
}
print(income_tax_payable)
}
income_tax(212000, tax_threshold_data)
marginal_rate <- function(income.gross
, tax_threshold_data
, yr = year(Sys.Date()) # optional
, resident_status = "resident" # optional
) {
tax_marginal_rate <<- tax_threshold_data %>%
filter(year == yr
, residency == resident_status
, threshold < income.gross) %>%
pull(rate) %>%
max()
return(tax_marginal_rate)
}
marginal_rate
income_tax <- function(income.gross
, tax_threshold_data
, yr = year(Sys.Date()) # optional
, resident_status = "resident" # optional
) {
tmp <- tax_threshold_data %>%
filter(year == yr
, residency == resident_status)
income_tax_payable <<- 0
for (i in 1:nrow(tmp)){
if (income.gross > tmp$threshold[i]) {
income_tax_payable <<- income_tax_payable +
min(income.gross-tmp$threshold[i], replace_na(tmp$threshold[i+1]-tmp$threshold[i], Inf))*(tmp$rate[i]+tmp$levy[i]+tmp$repair_levy[i])
}
}
return(income_tax_payable)
}
income_tax(212000, tax_threshold_data)
marginal_rate(income.gross, tax_threshold_data)
income.gross
######################################################################################## hecs  #######
hecs_threshold_data <- read_excel(here("taxes.xlsx")
, sheet = "hecs"
, skip = 0) %>%
select(c(1:3))
hecs_repayment <- function(income.hecs.mls
, hecs_threshold_data
, yr = year(Sys.Date()) # optional
) {
rate <- hecs_threshold_data %>%
filter(year == yr
, threshold <= income.hecs.mls) %>%
select(rate) %>%
max()
hecs_payable <<- income.hecs.mls*rate
return(hecs_payable)
}
hecs_repayment(hecs_threshold_data, 212000)
######################################################################################## hecs  #######
hecs_threshold_data <- read_excel(here("taxes.xlsx")
, sheet = "hecs"
, skip = 0) %>%
select(c(1:3))
hecs_threshold_data
hecs_repayment <- function(income.hecs.mls
, hecs_threshold_data
, yr = year(Sys.Date()) # optional
) {
rate <- hecs_threshold_data %>%
filter(year == yr
, threshold <= income.hecs.mls) %>%
select(rate) %>%
max()
hecs_payable <<- income.hecs.mls*rate
return(hecs_payable)
}
hecs_repayment(hecs_threshold_data, 212000)
hecs_repayment(212000, hecs_threshold_data)
hecs_repayment(122000, hecs_threshold_data)
######################################################################################## medicare levy surcharge  #######
mls_threshold_data <- read_excel(here("taxes.xlsx")
, sheet = "medicare_levy_surcharge"
, skip = 0) %>%
select(c(1:4)) %>%
mutate_if(is.character, as.logical) %>%
mutate_all(as.numeric)
medicare_levy_surcharge <- function(income.hecs.mls
, mls_threshold_data
, yr = year(Sys.Date()) # optional
, x.single = 0 # optional
) {
rate <- mls_threshold_data %>%
filter(year == yr
, single == as.numeric(x.single()) # error hERE for some reason
, threshold <= income.hecs.mls) %>%
select(rate) %>%
max()
mls_payable <- income.hecs.mls*rate
return(mls_payable)
}
medicare_levy_surcharge
medicare_levy_surcharge <- function(income.hecs.mls
, mls_threshold_data
, yr = year(Sys.Date()) # optional
, x.single = 0 # optional
) {
rate <- mls_threshold_data %>%
filter(year == yr
, single == as.numeric(x.single()) # error hERE for some reason
, threshold <= income.hecs.mls) %>%
select(rate) %>%
max()
mls_payable <- income.hecs.mls*rate
return(mls_payable)
}
medicare_levy_surcharge(21200, mls_threshold_data)
medicare_levy_surcharge <- function(income.hecs.mls
, mls_threshold_data
, yr = year(Sys.Date()) # optional
, x.single = 0 # optional
) {
rate <- mls_threshold_data %>%
filter(year == yr
, single == as.numeric(x.single) # error hERE for some reason
, threshold <= income.hecs.mls) %>%
select(rate) %>%
max()
mls_payable <- income.hecs.mls*rate
return(mls_payable)
}
medicare_levy_surcharge(21200, mls_threshold_data)
medicare_levy_surcharge <- function(income.hecs.mls
, mls_threshold_data
, yr = year(Sys.Date()) # optional
, x.single = 0 # optional
) {
rate <- mls_threshold_data %>%
filter(year == yr
, single == as.numeric(x.single) # error hERE for some reason
, threshold <= income.hecs.mls) %>%
select(rate) %>%
max()
mls_payable <- income.hecs.mls*rate
return(mls_payable)
}
medicare_levy_surcharge(211200, mls_threshold_data)
medicare_levy_surcharge <- function(income.hecs.mls
, mls_threshold_data
, yr = year(Sys.Date()) # optional
, x.single = 0 # optional
, private.health = 0
) {
if (private.health ==0){
rate <- mls_threshold_data %>%
filter(year == yr
, single == as.numeric(x.single) # error hERE for some reason
, threshold <= income.hecs.mls) %>%
select(rate) %>%
max()
mls_payable <<- income.hecs.mls*rate
} else {
mls_payable <<- 0
}
return(mls_payable)
}
medicare_levy_surcharge(211200, mls_threshold_data)
super.contributions.concessional
super.contributions.concessional
super.contributions.concessional
super.contributions.concessional
tmp$rate
### filter super rate data
tmp <- super_rate_data %>%
filter(year == yr)
tmp
################################################################################ income taxes #######
super_rate_data <- read_excel(here("taxes.xlsx")
, sheet = "super_contributions"
, skip = 0) %>%
select(c(1:14))
super_rate_data
################################################################################ income taxes #######
super_rate_data <- read_excel(here("taxes.xlsx")
, sheet = "super_contributions"
, skip = 0) %>%
select(c(1:10))
################################################################################ income taxes #######
super_rate_data <- read_excel(here("taxes.xlsx")
, sheet = "super_contributions"
, skip = 0) %>%
select(c(1:10))
super_rate_data
################################################################################ income taxes #######
super_rate_data <- read_excel(here("taxes.xlsx")
, sheet = "super_contributions"
, skip = 0) %>%
select(c(1:9))
super_rate_data
read_excel(here("taxes.xlsx")
, sheet = "super_contributions"
, skip = 0) %>%
select(c(1:14)) %>%
na.omit()
################################################################################ income taxes #######
super_rate_data <- read_excel(here("taxes.xlsx")
, sheet = "super_contributions"
, skip = 0) %>%
select(c(1:14)) %>%
na.omit()
tmp
### filter super rate data
tmp <- super_rate_data %>%
filter(year == yr)
################################################################################ income taxes #######
super_rate_data <- read_excel(here("taxes.xlsx")
, sheet = "super_contributions"
, skip = 0) %>%
select(c(1:14)) %>%
na.omit()
super_total_contributions <- function(income.gross ##compulsory
, super_rate_data ## dataframe
, tax_marginal_rate  ##compulsory
, yr = year(Sys.Date())
, super.rate.employer = NULL
, super.cont.vol = NULL
, super.cont.last5 = NULL
, super.balance = NULL) {
### filter super rate data
tmp <- super_rate_data %>%
filter(year == yr)
##### pass remaining optional arguments
if (is.null(super.rate.employer)) {super.rate.employer <- tmp$super_guarantee}
if (is.null(super.cont.vol)) {super.cont.vol <- tmp$default_vol_cont}
## assumes contribution for last 5y at current employer rate using 80% of current gross income
if (is.null(super.cont.last5)) {super.cont.last5 <- income.gross*super.rate.employer*5*0.8}
if (is.null(super.balance)) {super.balance <- tmp$default_super_balance}
super.guarantee <<- tmp$super_guarantee
#calculate gross super contributions and reportable super contributions and income for hecs and mls purposes
super.contributions.employer <<- income.gross*super.rate.employer
super.contributions.total <<- super.contributions.employer + super.cont.vol
super.contributions.rep <<- min(super.contributions.employer - income.gross*super.guarantee + super.cont.vol, tmp$cap_annual)
income.hecs.mls <<- income.gross + super.contributions.rep
income.gross.incl.super <<- income.gross*(1+super.rate.employer)
#return(super.contributions.total)
#return(super.contributions.rep)
#return(income.hecs.mls)
#return(income.gross.incl.super)
# calculate concessional and non-concessional super contributions
super.concessional.carry.limit <<- super_rate_data %>%
filter(year < yr, year >= yr-5) %>%
summarise(sum(cap_annual)) %>%
pull()
concessional.cap <<- tmp$cap_annual + max(0, super.concessional.carry.limit - super.cont.last5)
super.contributions.concessional <<- min(super.contributions.total, concessional.cap)
super.contributions.excess <<- max(0, super.contributions.total - concessional.cap)
## calculate baseline tax payable on superannuation contributions and your net super contribution, includes listo
if(income.gross <=37000) {
super.contrubtions.tax <<- super.contributions.concessional*tmp$rate +
super.contributions.excess*tax_marginal_rate -
super.contributions.concessional*tmp$lis
} else {
super.contrubtions.tax <<- super.contributions.concessional*tmp$rate +
super.contributions.excess*tax_marginal_rate
}
super.contrubtions.net <<- super.contributions.total - super.contrubtions.tax
#return(super.contrubtions.tax)
return(super.contrubtions.net)
#calculate additional income taxable payable for high income earners (div293), generally payable from finances, not SUPER
income.gross.div293 <<- income.gross*(1+super.rate.employer)
total.income.div293 <<- income.gross*(1+super.rate.employer) + super.cont.vol
if(total.income.div293 >   tmp$cap_div293){
tax_payable_div293 <<- min(total.income.div293 - tmp$cap_div293, super.contributions.total)*tmp$rate_div293
} else {
tax_payable_div293 <<- 0
}
# return(tax_payable_div293)
# calculate tax refund resulting from voluntary post-tax super contributions
#blabla - super.cont.vol
super.deduction.cap <<- max(concessional.cap - super.contributions.employer, 0)
super.deduction <<- min(super.deduction.cap, super.cont.vol)
income.gross.super.deduction <<- income.gross - super.deduction
}
super.contributions.concessional*tmp$listo_rate
min(super.contributions.concessional*tmp$listo_rate)
max(10, min(super.contributions.concessional*tmp$listo_rate, tmp$listo_cap_refund))
## calculate baseline tax payable on superannuation contributions and your net super contribution, includes listo
if(income.gross <=tmp$listo_cap_income) {
super.contrubtions.tax <<- super.contributions.concessional*tmp$rate +
super.contributions.excess*tax_marginal_rate -
max(10, min(super.contributions.concessional*tmp$listo_rate, tmp$listo_cap_refund))
} else {
super.contrubtions.tax <<- super.contributions.concessional*tmp$rate +
super.contributions.excess*tax_marginal_rate
}
################################################################################ income taxes #######
super_rate_data <- read_excel(here("taxes.xlsx")
, sheet = "super_contributions"
, skip = 0) %>%
select(c(1:14)) %>%
na.omit()
super_total_contributions <- function(income.gross ##compulsory
, super_rate_data ## dataframe
, tax_marginal_rate  ##compulsory
, yr = year(Sys.Date())
, super.rate.employer = NULL
, super.cont.vol = NULL
, super.cont.last5 = NULL
, super.balance = NULL) {
### filter super rate data
tmp <- super_rate_data %>%
filter(year == yr)
##### pass remaining optional arguments
if (is.null(super.rate.employer)) {super.rate.employer <- tmp$super_guarantee}
if (is.null(super.cont.vol)) {super.cont.vol <- tmp$default_vol_cont}
## assumes contribution for last 5y at current employer rate using 80% of current gross income
if (is.null(super.cont.last5)) {super.cont.last5 <- income.gross*super.rate.employer*5*0.8}
if (is.null(super.balance)) {super.balance <- tmp$default_super_balance}
super.guarantee <<- tmp$super_guarantee
#calculate gross super contributions and reportable super contributions and income for hecs and mls purposes
super.contributions.employer <<- income.gross*super.rate.employer
super.contributions.total <<- super.contributions.employer + super.cont.vol
super.contributions.rep <<- min(super.contributions.employer - income.gross*super.guarantee + super.cont.vol, tmp$cap_annual)
income.hecs.mls <<- income.gross + super.contributions.rep
income.gross.incl.super <<- income.gross*(1+super.rate.employer)
#return(super.contributions.total)
#return(super.contributions.rep)
#return(income.hecs.mls)
#return(income.gross.incl.super)
# calculate concessional and non-concessional super contributions
super.concessional.carry.limit <<- super_rate_data %>%
filter(year < yr, year >= yr-5) %>%
summarise(sum(cap_annual)) %>%
pull()
concessional.cap <<- tmp$cap_annual + max(0, super.concessional.carry.limit - super.cont.last5)
super.contributions.concessional <<- min(super.contributions.total, concessional.cap)
super.contributions.excess <<- max(0, super.contributions.total - concessional.cap)
## calculate baseline tax payable on superannuation contributions and your net super contribution, includes listo
if(income.gross <=tmp$listo_cap_income) {
super.contrubtions.tax <<- super.contributions.concessional*tmp$rate +
super.contributions.excess*tax_marginal_rate -
max(10, min(super.contributions.concessional*tmp$listo_rate, tmp$listo_cap_refund))
} else {
super.contrubtions.tax <<- super.contributions.concessional*tmp$rate +
super.contributions.excess*tax_marginal_rate
}
super.contrubtions.net <<- super.contributions.total - super.contrubtions.tax
#return(super.contrubtions.tax)
return(super.contrubtions.net)
#calculate additional income taxable payable for high income earners (div293), generally payable from finances, not SUPER
income.gross.div293 <<- income.gross*(1+super.rate.employer)
total.income.div293 <<- income.gross*(1+super.rate.employer) + super.cont.vol
if(total.income.div293 >   tmp$cap_div293){
tax_payable_div293 <<- min(total.income.div293 - tmp$cap_div293, super.contributions.total)*tmp$rate_div293
} else {
tax_payable_div293 <<- 0
}
# return(tax_payable_div293)
# calculate tax refund resulting from voluntary post-tax super contributions
#blabla - super.cont.vol
super.deduction.cap <<- max(concessional.cap - super.contributions.employer, 0)
super.deduction <<- min(super.deduction.cap, super.cont.vol)
income.gross.super.deduction <<- income.gross - super.deduction
}
super_total_contributions(income.gross, super_rate_data
, tax_marginal_rate)
max(10, min(super.contributions.concessional*tmp$listo_rate, tmp$listo_cap_refund))
## calculate baseline tax payable on superannuation contributions and your net super contribution, includes listo
if(income.gross <= tmp$listo_cap_income) {
super.listo.refund <<- max
} else {
super.listo.refund <<- 0
}
if(income.gross <= tmp$listo_cap_income) {
super.listo.refund <<- max(10, min(super.contributions.concessional*tmp$listo_rate, tmp$listo_cap_refund))
} else {
super.listo.refund <<- 0
}
super.contrubtions.tax <<- super.contributions.concessional*tmp$rate +
super.contributions.excess*tax_marginal_rate -
max(10, min(super.contributions.concessional*tmp$listo_rate, tmp$listo_cap_refund))
super.contrubtions.net <<- super.contributions.total - super.contrubtions.tax
if(income.gross <= tmp$listo_cap_income) {
super.listo.refund <<- max(10, min(super.contributions.concessional*tmp$listo_rate, tmp$listo_cap_refund))
} else {
super.listo.refund <<- 0
}
super.contrubtions.tax <<- super.contributions.concessional*tmp$rate +
super.contributions.excess*tax_marginal_rate -
super.listo.refund
super.contrubtions.net <<- super.contributions.total - super.contrubtions.tax
super.listo.refund
super.contrubtions.net
super_total_contributions(income.gross, super_rate_data
, tax_marginal_rate)
tax_threshold_data %>%
filter(year == yr
, residency == resident_status
, threshold < income.gross) %>%
pull(rate) %>%
max()
################################################################################ income taxes #######
super_rate_data <- read_excel(here("taxes.xlsx")
, sheet = "super_contributions"
, skip = 0) %>%
select(c(1:14)) %>%
na.omit()
super_total_contributions <- function(income.gross ##compulsory
, super_rate_data ## dataframe
, tax_threshold_data # to calculate marginal tax rate
, yr = year(Sys.Date())
, super.rate.employer = NULL
, super.cont.vol = NULL
, super.cont.last5 = NULL
, super.balance = NULL
, resident_status = "resident"
) {
## find marginal tax rate
tax_marginal_rate <<- tax_threshold_data %>%
filter(year == yr
, residency == resident_status
, threshold < income.gross) %>%
pull(rate) %>%
max()
### filter super rate data
tmp <- super_rate_data %>%
filter(year == yr)
##### pass remaining optional arguments
if (is.null(super.rate.employer)) {super.rate.employer <- tmp$super_guarantee}
if (is.null(super.cont.vol)) {super.cont.vol <- tmp$default_vol_cont}
## assumes contribution for last 5y at current employer rate using 80% of current gross income
if (is.null(super.cont.last5)) {super.cont.last5 <- income.gross*super.rate.employer*5*0.8}
if (is.null(super.balance)) {super.balance <- tmp$default_super_balance}
super.guarantee <<- tmp$super_guarantee
#calculate gross super contributions and reportable super contributions and income for hecs and mls purposes
super.contributions.employer <<- income.gross*super.rate.employer
super.contributions.total <<- super.contributions.employer + super.cont.vol
super.contributions.rep <<- min(super.contributions.employer - income.gross*super.guarantee + super.cont.vol, tmp$cap_annual)
income.hecs.mls <<- income.gross + super.contributions.rep
income.gross.incl.super <<- income.gross*(1+super.rate.employer)
#return(super.contributions.total)
#return(super.contributions.rep)
#return(income.hecs.mls)
#return(income.gross.incl.super)
# calculate concessional and non-concessional super contributions
super.concessional.carry.limit <<- super_rate_data %>%
filter(year < yr, year >= yr-5) %>%
summarise(sum(cap_annual)) %>%
pull()
concessional.cap <<- tmp$cap_annual + max(0, super.concessional.carry.limit - super.cont.last5)
super.contributions.concessional <<- min(super.contributions.total, concessional.cap)
super.contributions.excess <<- max(0, super.contributions.total - concessional.cap)
## calculate tax payable on superannuation contributions and your net super contribution, includes listo
if(income.gross <= tmp$listo_cap_income) {
super.listo.refund <<- max(10, min(super.contributions.concessional*tmp$listo_rate, tmp$listo_cap_refund))
} else {
super.listo.refund <<- 0
}
super.contrubtions.tax <<- super.contributions.concessional*tmp$rate +
super.contributions.excess*tax_marginal_rate -
super.listo.refund
super.contrubtions.net <<- super.contributions.total - super.contrubtions.tax
#return(super.contrubtions.tax)
return(super.contrubtions.net)
#calculate additional income taxable payable for high income earners (div293), generally payable from finances, not SUPER
income.gross.div293 <<- income.gross*(1+super.rate.employer)
total.income.div293 <<- income.gross*(1+super.rate.employer) + super.cont.vol
if(total.income.div293 >   tmp$cap_div293){
tax_payable_div293 <<- min(total.income.div293 - tmp$cap_div293, super.contributions.total)*tmp$rate_div293
} else {
tax_payable_div293 <<- 0
}
# return(tax_payable_div293)
# calculate tax refund resulting from voluntary post-tax super contributions
#blabla - super.cont.vol
super.deduction.cap <<- max(concessional.cap - super.contributions.employer, 0)
super.deduction <<- min(super.deduction.cap, super.cont.vol)
income.gross.super.deduction <<- income.gross - super.deduction
}
income.gross.super.deduction
super.deduction.cap
super.deduction
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
